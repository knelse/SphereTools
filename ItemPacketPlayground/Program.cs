using static ObjectPacketTools;

Console.WindowWidth = 600;
//27/08/2022 16:46:58			27/08/2022 16:49:18			38002C0100503A9FBF5C466102000A820050A30C300000005010848086650008000080822008F028032C000000140461E061198019000000
//27/08/2022 16:47:01			B0002C0100543A35CAA08F0F80842E090000000000000000409145E644121560E0F317A0C0020100BF8665B2C407404297040000000000000000A0C8225377880A30F0F90B50C80280FFFFFFFF020B0400FC7894C1171F00095D12000000000000000080228B4CEF072AC0C0E72F40210B00FEFFFFFF0BEFA076F7459616D62697E676062303F07B58064B7C002474490000000000000000008A2C322F87A800039FBF00852C00F8FFFFFF2FB0400000

// using var db = new LiteDatabase(@"Filename=C:\_sphereStuff\sph_items.db;Connection=shared;");
// var itemCollection = db.GetCollection<ObjectPacket>("ObjectPackets");
RegisterBsonMapperForBit();

var fromCode = true;

if (fromCode)
{
    // ma missing
    var container = Convert.FromHexString(

           // "23D8DC8B0FF0BA2D09406B1D1980A7F418407145A61C168D60732F0518600107286401C0FFFFFF7FC103027E51D8DC8B0F88142D09D0471F1980D4E918589145261C16156080051C0051D8DC4B210B00FEFFFFFF7F");

    var objects = GetObjectsFromPacket(container);

    Console.WriteLine(GetTextOutput(objects, true));
    
    // objects.ForEach(x => itemCollection.Insert(x));
}

else
{
    while (true)
    {
        var container = Convert.FromHexString(Console.ReadLine());
        var objects = GetObjectsFromPacket(container);

        Console.WriteLine(GetTextOutput(objects, true));
    }
}

